apiVersion: apps/v1 # 배포 객체에 대한 api 버전
kind: Deployment  # 생성할 객체 유형
metadata:  # 배포 객체에 대한 세부정보
  name: catalog-service
  labels: # 배포에 추가할 레이블 집합
    app: catalog-service  # 이 배포는 "app=catalog-service" 라는 레이블을 갖는다

spec:
  replicas: 1
  selector: # 레플리카셋을 통해 확장할 객체 식별 정의
    matchLabels:
      app: catalog-service # 사용할 레이블
  template: # 사용할 파드 및 컨테이너 생성하기 위해 명세
    metadata:
      name: catalog-service
      labels:
        app: catalog-service
      annotations:
        prometheus.io/scrape: "true" # 프로메테우스에게 이 파드에 있는 컨터에너로부터 데이터를 가져와야함을 알린다
        prometheus.io/path: /actuator/prometheus # 프로메테우스 메트릭을 제공하는 http 엔드포인트 지정
        prometheus.io/port: "9001" # 메트릭 엔드포인트 포트

    spec:
      containers:
        - name: catalog-service # 파드 이름
          image: catalog-service
          imagePullPolicy: IfNotPresent
          livenessProbe: # 활성 상태 프로브
            httpGet:
              path: /actuator/health/liveness
              port: 9001
            initialDelaySeconds: 13 # 애플리케이션 시작하고 상태 확인 전 초기 지연 시간
            periodSeconds: 5 # 활성 상태를 가져오는 빈도
          readinessProbe: # 준비 상태 프로브
            httpGet:
              path: /actuator/health/readiness
              port: 9001
            initialDelaySeconds: 8
            periodSeconds: 15

          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 5"] # 쿠버네티스가 파드에 SIGTERM 신호를 보내기 전에 5초를 기다려 전체에 요청 전달 중지 명령을 할 수 있도록 지연한다
          ports:
            - containerPort: 9001
          env:
            - name: BPL_JVM_THREAD_COUNT
              value: "50"
            - name: SPRING_PROFILES_ACTIVE
              value: testdata
          volumeMounts: # 컨피그맵을 컨테이너 볼륨에 마운트한다.
            - mountPath: /workspace/config # 해당 경로에 속성 파일이 생성되고 스프링 부트는 자동으로 해당 경로에서 속성 파일을 찾고 로드한다.
              name: catalog-config-volume
      volumes: # 파드를 위해 볼륨 정의
        - name: catalog-config-volume # 볼륨 이름
          configMap:
            name: catalog-config


