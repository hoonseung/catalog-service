server:
  port: 9001
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5
  shutdown: graceful

polar:
  greeting: welcome to the local book catalog!
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop
          # 액세스 토큰의 서명을 확인하기 위해 공개키가 필요하다, 공개키는 해당 엔드포인트에서 가져올 수 있다.
          # 첫 번째 http 요청 시 인증헤더가 존재한다면 해당 엔드포인트가 호출되어 토큰 서명을을 자동으로 확인 후 jwtDecoder 을 사용하여 클레임을 파싱한다

  lifecycle:
    timeout-per-shutdown-phase: 15s
  application:
    name: catalog-service
  datasource:
      username: hoonseung
      password: seunghoon
      url: jdbc:postgresql://localhost:5432/polardb_catalog
      hikari:
        connection-timeout: 2000
        maximum-pool-size: 5
  config:
    import: ""      #"optional:configserver:http://localhost:8888" # 1순위
  cloud:
    config:
      enabled: false
      uri: http://localhost:8888 # 2순위
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false # 재시도 작동 prod 환경 때 true
      retry:
        max-attempts: 6 # 최대 시도수
        initial-interval: 1000 # 최초 재시도 지연 시간 (밀리초)
        max-interval: 2000 # 재시도 지연 최대 시간
        multiplier: 1.1 # 지연 시간 계산 승수
  flyway:
    baseline-on-migrate: true
    locations: "classpath:db/migration"


info:
  system: Polar Bookshop # 액추에이터 info 엔드포인트를 통해 노출

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, flyway, health, heapdump, info, loggers, mappings, prometheus  # 노출할 모니터링 HTTP 엔드포인트 목록
  endpoint:
    health:
      show-details: always  # 애플리케이션 상세 정보를 항상 보여준다
      show-components: always # 애플리케이션이 사용하는 구성요소에 대한 정보를 항상 보여준다
      probes:
        enabled: true # 상태 프로브 지원 활성화
  info:
    env:
      enabled: true # info. 로 시작하는 환경 변수 정보를 info 엔드포인트를 통해 노출
    java:
      enabled: true
    os:
      enabled: true

  metrics:
    tags:
      application: ${spring.application.name} # 모든 메트릭은 해당 이름을 갖는 application 레이블을 갖게된다. 메트릭 질의, 대시보드 작성에 유용

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

