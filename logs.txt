
==> Í∞êÏÇ¨ <==
|---------|--------------------------------|----------|------|---------|---------------------|---------------------|
| Command |              Args              | Profile  | User | Version |     Start Time      |      End Time       |
|---------|--------------------------------|----------|------|---------|---------------------|---------------------|
| start   | --driver=docker                | minikube | lsh  | v1.33.1 | 08 Jun 24 11:27 KST | 08 Jun 24 11:29 KST |
| config  | set driver docker              | minikube | lsh  | v1.33.1 | 08 Jun 24 11:29 KST | 08 Jun 24 11:29 KST |
| stop    |                                | minikube | lsh  | v1.33.1 | 08 Jun 24 11:31 KST | 08 Jun 24 11:31 KST |
| start   |                                | minikube | lsh  | v1.33.1 | 08 Jun 24 13:28 KST | 08 Jun 24 13:28 KST |
| image   | load                           | minikube | lsh  | v1.33.1 | 08 Jun 24 13:37 KST | 08 Jun 24 13:38 KST |
|         | catalog-service:0.0.1-SNAPSHOT |          |      |         |                     |                     |
| stop    |                                | minikube | lsh  | v1.33.1 | 08 Jun 24 14:11 KST | 08 Jun 24 14:11 KST |
| start   | --cpus 2 --memory 4g --driver  | polar    | lsh  | v1.33.1 | 11 Jun 24 20:27 KST | 11 Jun 24 20:28 KST |
|         | docker --profile polar         |          |      |         |                     |                     |
| image   | load catalog-service --profile | polar    | lsh  | v1.33.1 | 11 Jun 24 22:26 KST | 11 Jun 24 22:26 KST |
|         | polar                          |          |      |         |                     |                     |
| image   | rm catalog-service             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:12 KST | 11 Jun 24 23:12 KST |
| image   | ls catalog-service             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:12 KST | 11 Jun 24 23:12 KST |
| image   | ls                             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:12 KST | 11 Jun 24 23:12 KST |
| image   | load catalog-service --profile | polar    | lsh  | v1.33.1 | 11 Jun 24 23:13 KST | 11 Jun 24 23:13 KST |
|         | polar                          |          |      |         |                     |                     |
| image   | ls catalog-service             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:14 KST | 11 Jun 24 23:14 KST |
| image   | ls                             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:14 KST | 11 Jun 24 23:14 KST |
| image   | rm catalog-service             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:14 KST | 11 Jun 24 23:14 KST |
| image   | ls                             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:14 KST | 11 Jun 24 23:14 KST |
| image   | ls                             | minikube | lsh  | v1.33.1 | 11 Jun 24 23:14 KST | 11 Jun 24 23:14 KST |
| image   | load catalog-service --profile | polar    | lsh  | v1.33.1 | 11 Jun 24 23:24 KST | 11 Jun 24 23:24 KST |
|         | polar                          |          |      |         |                     |                     |
| start   |                                | minikube | lsh  | v1.33.1 | 12 Jun 24 20:35 KST | 12 Jun 24 20:36 KST |
| image   | ls                             | minikube | lsh  | v1.33.1 | 12 Jun 24 21:28 KST | 12 Jun 24 21:28 KST |
| image   | load catalog-service --profile | poalr    | lsh  | v1.33.1 | 12 Jun 24 21:29 KST |                     |
|         | poalr                          |          |      |         |                     |                     |
| image   | load catalog-service --profile | polar    | lsh  | v1.33.1 | 12 Jun 24 21:29 KST | 12 Jun 24 21:29 KST |
|         | polar                          |          |      |         |                     |                     |
| image   | ls                             | minikube | lsh  | v1.33.1 | 12 Jun 24 21:30 KST | 12 Jun 24 21:30 KST |
| start   | --cpus 2 --memory 4g --driver  | polar    | lsh  | v1.33.1 | 12 Jun 24 21:32 KST |                     |
|         | docker --profile polar         |          |      |         |                     |                     |
| start   |                                | minikube | lsh  | v1.33.1 | 12 Jun 24 21:37 KST |                     |
| delete  | --all                          | minikube | lsh  | v1.33.1 | 12 Jun 24 21:42 KST | 12 Jun 24 21:42 KST |
| start   | --cpus 2 --memory 4g --driver  | polar    | lsh  | v1.33.1 | 12 Jun 24 21:43 KST | 12 Jun 24 21:43 KST |
|         | docker --profile polar         |          |      |         |                     |                     |
| image   | ls                             | minikube | lsh  | v1.33.1 | 12 Jun 24 21:44 KST |                     |
| image   | ls                             | minikube | lsh  | v1.33.1 | 12 Jun 24 21:44 KST |                     |
| image   | load catalog-service --profile | polar    | lsh  | v1.33.1 | 12 Jun 24 21:45 KST | 12 Jun 24 21:45 KST |
|         | polar                          |          |      |         |                     |                     |
| image   | ls                             | minikube | lsh  | v1.33.1 | 12 Jun 24 21:46 KST |                     |
| image   | ls                             | minikube | lsh  | v1.33.1 | 12 Jun 24 21:46 KST |                     |
|---------|--------------------------------|----------|------|---------|---------------------|---------------------|


==> ÎßàÏßÄÎßâ ÏãúÏûë <==
Log file created at: 2024/06/12 21:43:04
Running on machine: iseunghcBookPro
Binary: Built with gc go1.22.3 for darwin/arm64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0612 21:43:04.000023   97041 out.go:291] Setting OutFile to fd 1 ...
I0612 21:43:04.000163   97041 out.go:343] isatty.IsTerminal(1) = true
I0612 21:43:04.000166   97041 out.go:304] Setting ErrFile to fd 2...
I0612 21:43:04.000168   97041 out.go:343] isatty.IsTerminal(2) = true
I0612 21:43:04.000312   97041 root.go:338] Updating PATH: /Users/lsh/.minikube/bin
I0612 21:43:04.000918   97041 out.go:298] Setting JSON to false
I0612 21:43:04.027420   97041 start.go:129] hostinfo: {"hostname":"iseunghcBookPro","uptime":179050,"bootTime":1718017134,"procs":467,"os":"darwin","platform":"darwin","platformFamily":"Standalone Workstation","platformVersion":"14.5","kernelVersion":"23.5.0","kernelArch":"arm64","virtualizationSystem":"","virtualizationRole":"","hostId":"dffb96dc-f9d4-5045-808b-8c3b3f3a4037"}
W0612 21:43:04.027505   97041 start.go:137] gopshost.Virtualization returned error: not implemented yet
I0612 21:43:04.034422   97041 out.go:177] üòÑ  [polar] Darwin 14.5 (arm64) Ïùò minikube v1.33.1
I0612 21:43:04.040616   97041 notify.go:220] Checking for updates...
I0612 21:43:04.040860   97041 driver.go:392] Setting default libvirt URI to qemu:///system
I0612 21:43:04.097006   97041 docker.go:122] docker version: linux-26.1.1:Docker Desktop 4.30.0 (149282)
I0612 21:43:04.097148   97041 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0612 21:43:04.377740   97041 info.go:266] docker info: {ID:2d51dad0-da72-4184-9b61-8affc30cb779 Containers:6 ContainersRunning:0 ContainersPaused:0 ContainersStopped:6 Images:16 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:146 OomKillDisable:false NGoroutines:262 SystemTime:2024-06-12 12:43:04.362702504 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:107 KernelVersion:6.6.26-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:aarch64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:11 MemTotal:8221552640 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[com.docker.desktop.address=unix:///Users/lsh/Library/Containers/com.docker.docker/Data/docker-cli.sock] ExperimentalBuild:false ServerVersion:26.1.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:e377cd56a71523140ca6ae87e30244719194a521 Expected:e377cd56a71523140ca6ae87e30244719194a521} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=unconfined name=cgroupns] ProductLicense: Warnings:[WARNING: daemon is not using the default seccomp profile] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/Users/lsh/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.14.0-desktop.1] map[Name:compose Path:/Users/lsh/.docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.27.0-desktop.2] map[Name:debug Path:/Users/lsh/.docker/cli-plugins/docker-debug SchemaVersion:0.1.0 ShortDescription:Get a shell into any image or container Vendor:Docker Inc. Version:0.0.29] map[Name:dev Path:/Users/lsh/.docker/cli-plugins/docker-dev SchemaVersion:0.1.0 ShortDescription:Docker Dev Environments Vendor:Docker Inc. Version:v0.1.2] map[Name:extension Path:/Users/lsh/.docker/cli-plugins/docker-extension SchemaVersion:0.1.0 ShortDescription:Manages Docker extensions Vendor:Docker Inc. Version:v0.2.23] map[Name:feedback Path:/Users/lsh/.docker/cli-plugins/docker-feedback SchemaVersion:0.1.0 ShortDescription:Provide feedback, right in your terminal! Vendor:Docker Inc. Version:v1.0.4] map[Name:init Path:/Users/lsh/.docker/cli-plugins/docker-init SchemaVersion:0.1.0 ShortDescription:Creates Docker-related starter files for your project Vendor:Docker Inc. Version:v1.1.0] map[Name:sbom Path:/Users/lsh/.docker/cli-plugins/docker-sbom SchemaVersion:0.1.0 ShortDescription:View the packaged-based Software Bill Of Materials (SBOM) for an image URL:https://github.com/docker/sbom-cli-plugin Vendor:Anchore Inc. Version:0.6.0] map[Name:scout Path:/Users/lsh/.docker/cli-plugins/docker-scout SchemaVersion:0.1.0 ShortDescription:Docker Scout Vendor:Docker Inc. Version:v1.8.0]] Warnings:<nil>}}
I0612 21:43:04.384273   97041 out.go:177] ‚ú®  Ïú†Ï†Ä ÌôòÍ≤Ω ÏÑ§Ï†ï Ï†ïÎ≥¥Ïóê Í∏∞Î∞òÌïòÏó¨ docker ÎìúÎùºÏù¥Î≤ÑÎ•º ÏÇ¨Ïö©ÌïòÎäî Ï§ë
I0612 21:43:04.387385   97041 start.go:297] selected driver: docker
I0612 21:43:04.387388   97041 start.go:901] validating driver "docker" against <nil>
I0612 21:43:04.387401   97041 start.go:912] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0612 21:43:04.387575   97041 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0612 21:43:04.477057   97041 info.go:266] docker info: {ID:2d51dad0-da72-4184-9b61-8affc30cb779 Containers:6 ContainersRunning:0 ContainersPaused:0 ContainersStopped:6 Images:16 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:146 OomKillDisable:false NGoroutines:262 SystemTime:2024-06-12 12:43:04.464863879 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:107 KernelVersion:6.6.26-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:aarch64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:11 MemTotal:8221552640 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[com.docker.desktop.address=unix:///Users/lsh/Library/Containers/com.docker.docker/Data/docker-cli.sock] ExperimentalBuild:false ServerVersion:26.1.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:e377cd56a71523140ca6ae87e30244719194a521 Expected:e377cd56a71523140ca6ae87e30244719194a521} RuncCommit:{ID:v1.1.12-0-g51d5e94 Expected:v1.1.12-0-g51d5e94} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=unconfined name=cgroupns] ProductLicense: Warnings:[WARNING: daemon is not using the default seccomp profile] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/Users/lsh/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.14.0-desktop.1] map[Name:compose Path:/Users/lsh/.docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.27.0-desktop.2] map[Name:debug Path:/Users/lsh/.docker/cli-plugins/docker-debug SchemaVersion:0.1.0 ShortDescription:Get a shell into any image or container Vendor:Docker Inc. Version:0.0.29] map[Name:dev Path:/Users/lsh/.docker/cli-plugins/docker-dev SchemaVersion:0.1.0 ShortDescription:Docker Dev Environments Vendor:Docker Inc. Version:v0.1.2] map[Name:extension Path:/Users/lsh/.docker/cli-plugins/docker-extension SchemaVersion:0.1.0 ShortDescription:Manages Docker extensions Vendor:Docker Inc. Version:v0.2.23] map[Name:feedback Path:/Users/lsh/.docker/cli-plugins/docker-feedback SchemaVersion:0.1.0 ShortDescription:Provide feedback, right in your terminal! Vendor:Docker Inc. Version:v1.0.4] map[Name:init Path:/Users/lsh/.docker/cli-plugins/docker-init SchemaVersion:0.1.0 ShortDescription:Creates Docker-related starter files for your project Vendor:Docker Inc. Version:v1.1.0] map[Name:sbom Path:/Users/lsh/.docker/cli-plugins/docker-sbom SchemaVersion:0.1.0 ShortDescription:View the packaged-based Software Bill Of Materials (SBOM) for an image URL:https://github.com/docker/sbom-cli-plugin Vendor:Anchore Inc. Version:0.6.0] map[Name:scout Path:/Users/lsh/.docker/cli-plugins/docker-scout SchemaVersion:0.1.0 ShortDescription:Docker Scout Vendor:Docker Inc. Version:v1.8.0]] Warnings:<nil>}}
I0612 21:43:04.477216   97041 start_flags.go:310] no existing cluster config was found, will generate one from the flags 
I0612 21:43:04.477929   97041 start_flags.go:929] Wait components to verify : map[apiserver:true system_pods:true]
I0612 21:43:04.479800   97041 out.go:177] üìå  Using Docker Desktop driver with root privileges
I0612 21:43:04.482356   97041 cni.go:84] Creating CNI manager for ""
I0612 21:43:04.482363   97041 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0612 21:43:04.482369   97041 start_flags.go:319] Found "bridge CNI" CNI - setting NetworkPlugin=cni
I0612 21:43:04.482441   97041 start.go:340] cluster config:
{Name:polar KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4096 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:polar Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0612 21:43:04.485316   97041 out.go:177] üëç  Starting "polar" primary control-plane node in "polar" cluster
I0612 21:43:04.490279   97041 cache.go:121] Beginning downloading kic base image for docker with docker
I0612 21:43:04.492589   97041 out.go:177] üöú  Pulling base image v0.0.44 ...
I0612 21:43:04.498415   97041 preload.go:132] Checking if preload exists for k8s version v1.30.0 and runtime docker
I0612 21:43:04.498431   97041 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e in local docker daemon
I0612 21:43:04.498472   97041 preload.go:147] Found local preload: /Users/lsh/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.30.0-docker-overlay2-arm64.tar.lz4
I0612 21:43:04.498486   97041 cache.go:56] Caching tarball of preloaded images
I0612 21:43:04.498593   97041 preload.go:173] Found /Users/lsh/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.30.0-docker-overlay2-arm64.tar.lz4 in cache, skipping download
I0612 21:43:04.498598   97041 cache.go:59] Finished verifying existence of preloaded tar for v1.30.0 on docker
I0612 21:43:04.499356   97041 profile.go:143] Saving config to /Users/lsh/.minikube/profiles/polar/config.json ...
I0612 21:43:04.499400   97041 lock.go:35] WriteFile acquiring /Users/lsh/.minikube/profiles/polar/config.json: {Name:mka0ff4786ac0aa66f07ff7e4062189b6e0140ea Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:04.557070   97041 image.go:83] Found gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e in local docker daemon, skipping pull
I0612 21:43:04.557086   97041 cache.go:144] gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e exists in daemon, skipping load
I0612 21:43:04.557100   97041 cache.go:194] Successfully downloaded all kic artifacts
I0612 21:43:04.557146   97041 start.go:360] acquireMachinesLock for polar: {Name:mkd1556f3ee3a7cb5d7657299f0137040e2c21f8 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0612 21:43:04.557228   97041 start.go:364] duration metric: took 68.459¬µs to acquireMachinesLock for "polar"
I0612 21:43:04.557252   97041 start.go:93] Provisioning new machine with config: &{Name:polar KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4096 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:polar Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} &{Name: IP: Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}
I0612 21:43:04.557293   97041 start.go:125] createHost starting for "" (driver="docker")
I0612 21:43:04.564406   97041 out.go:204] üî•  Creating docker container (CPUs=2, Memory=4096MB) ...
I0612 21:43:04.564643   97041 start.go:159] libmachine.API.Create for "polar" (driver="docker")
I0612 21:43:04.564656   97041 client.go:168] LocalClient.Create starting
I0612 21:43:04.564765   97041 main.go:141] libmachine: Reading certificate data from /Users/lsh/.minikube/certs/ca.pem
I0612 21:43:04.564944   97041 main.go:141] libmachine: Decoding PEM data...
I0612 21:43:04.564960   97041 main.go:141] libmachine: Parsing certificate...
I0612 21:43:04.565196   97041 main.go:141] libmachine: Reading certificate data from /Users/lsh/.minikube/certs/cert.pem
I0612 21:43:04.565324   97041 main.go:141] libmachine: Decoding PEM data...
I0612 21:43:04.565350   97041 main.go:141] libmachine: Parsing certificate...
I0612 21:43:04.565758   97041 cli_runner.go:164] Run: docker network inspect polar --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0612 21:43:04.613500   97041 cli_runner.go:211] docker network inspect polar --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0612 21:43:04.613604   97041 network_create.go:281] running [docker network inspect polar] to gather additional debugging logs...
I0612 21:43:04.613623   97041 cli_runner.go:164] Run: docker network inspect polar
W0612 21:43:04.662335   97041 cli_runner.go:211] docker network inspect polar returned with exit code 1
I0612 21:43:04.662370   97041 network_create.go:284] error running [docker network inspect polar]: docker network inspect polar: exit status 1
stdout:
[]

stderr:
Error response from daemon: network polar not found
I0612 21:43:04.662380   97041 network_create.go:286] output of [docker network inspect polar]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network polar not found

** /stderr **
I0612 21:43:04.662512   97041 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0612 21:43:04.713197   97041 network.go:206] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0x140014ea200}
I0612 21:43:04.713228   97041 network_create.go:124] attempt to create docker network polar 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 65535 ...
I0612 21:43:04.713287   97041 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=65535 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=polar polar
I0612 21:43:04.795461   97041 network_create.go:108] docker network polar 192.168.49.0/24 created
I0612 21:43:04.795510   97041 kic.go:121] calculated static IP "192.168.49.2" for the "polar" container
I0612 21:43:04.795621   97041 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0612 21:43:04.851211   97041 cli_runner.go:164] Run: docker volume create polar --label name.minikube.sigs.k8s.io=polar --label created_by.minikube.sigs.k8s.io=true
I0612 21:43:04.903695   97041 oci.go:103] Successfully created a docker volume polar
I0612 21:43:04.903843   97041 cli_runner.go:164] Run: docker run --rm --name polar-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=polar --entrypoint /usr/bin/test -v polar:/var gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -d /var/lib
I0612 21:43:05.391948   97041 oci.go:107] Successfully prepared a docker volume polar
I0612 21:43:05.392000   97041 preload.go:132] Checking if preload exists for k8s version v1.30.0 and runtime docker
I0612 21:43:05.392018   97041 kic.go:194] Starting extracting preloaded images to volume ...
I0612 21:43:05.392161   97041 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /Users/lsh/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.30.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v polar:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -I lz4 -xf /preloaded.tar -C /extractDir
I0612 21:43:07.347757   97041 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /Users/lsh/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.30.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v polar:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -I lz4 -xf /preloaded.tar -C /extractDir: (1.955470458s)
I0612 21:43:07.347837   97041 kic.go:203] duration metric: took 1.955796375s to extract preloaded images to volume ...
I0612 21:43:07.348097   97041 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0612 21:43:07.467090   97041 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname polar --name polar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=polar --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=polar --network polar --ip 192.168.49.2 --volume polar:/var --security-opt apparmor=unconfined --memory=4096mb --memory-swap=4096mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e
I0612 21:43:07.734383   97041 cli_runner.go:164] Run: docker container inspect polar --format={{.State.Running}}
I0612 21:43:07.783521   97041 cli_runner.go:164] Run: docker container inspect polar --format={{.State.Status}}
I0612 21:43:07.837724   97041 cli_runner.go:164] Run: docker exec polar stat /var/lib/dpkg/alternatives/iptables
I0612 21:43:07.921665   97041 oci.go:144] the created container "polar" has a running status.
I0612 21:43:07.921757   97041 kic.go:225] Creating ssh key for kic: /Users/lsh/.minikube/machines/polar/id_rsa...
I0612 21:43:08.206362   97041 kic_runner.go:191] docker (temp): /Users/lsh/.minikube/machines/polar/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0612 21:43:08.257703   97041 cli_runner.go:164] Run: docker container inspect polar --format={{.State.Status}}
I0612 21:43:08.302471   97041 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0612 21:43:08.302486   97041 kic_runner.go:114] Args: [docker exec --privileged polar chown docker:docker /home/docker/.ssh/authorized_keys]
I0612 21:43:08.379092   97041 cli_runner.go:164] Run: docker container inspect polar --format={{.State.Status}}
I0612 21:43:08.419714   97041 machine.go:94] provisionDockerMachine start ...
I0612 21:43:08.419816   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:08.460354   97041 main.go:141] libmachine: Using SSH client type: native
I0612 21:43:08.460546   97041 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x102563180] 0x1025659e0 <nil>  [] 0s} 127.0.0.1 60004 <nil> <nil>}
I0612 21:43:08.460550   97041 main.go:141] libmachine: About to run SSH command:
hostname
I0612 21:43:08.587436   97041 main.go:141] libmachine: SSH cmd err, output: <nil>: polar

I0612 21:43:08.587454   97041 ubuntu.go:169] provisioning hostname "polar"
I0612 21:43:08.587551   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:08.632309   97041 main.go:141] libmachine: Using SSH client type: native
I0612 21:43:08.632513   97041 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x102563180] 0x1025659e0 <nil>  [] 0s} 127.0.0.1 60004 <nil> <nil>}
I0612 21:43:08.632518   97041 main.go:141] libmachine: About to run SSH command:
sudo hostname polar && echo "polar" | sudo tee /etc/hostname
I0612 21:43:08.780318   97041 main.go:141] libmachine: SSH cmd err, output: <nil>: polar

I0612 21:43:08.780453   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:08.833874   97041 main.go:141] libmachine: Using SSH client type: native
I0612 21:43:08.834426   97041 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x102563180] 0x1025659e0 <nil>  [] 0s} 127.0.0.1 60004 <nil> <nil>}
I0612 21:43:08.834438   97041 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\spolar' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 polar/g' /etc/hosts;
			else 
				echo '127.0.1.1 polar' | sudo tee -a /etc/hosts; 
			fi
		fi
I0612 21:43:08.978474   97041 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0612 21:43:08.978500   97041 ubuntu.go:175] set auth options {CertDir:/Users/lsh/.minikube CaCertPath:/Users/lsh/.minikube/certs/ca.pem CaPrivateKeyPath:/Users/lsh/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/Users/lsh/.minikube/machines/server.pem ServerKeyPath:/Users/lsh/.minikube/machines/server-key.pem ClientKeyPath:/Users/lsh/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/Users/lsh/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/Users/lsh/.minikube}
I0612 21:43:08.978533   97041 ubuntu.go:177] setting up certificates
I0612 21:43:08.978546   97041 provision.go:84] configureAuth start
I0612 21:43:08.978729   97041 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" polar
I0612 21:43:09.034292   97041 provision.go:143] copyHostCerts
I0612 21:43:09.034427   97041 exec_runner.go:144] found /Users/lsh/.minikube/ca.pem, removing ...
I0612 21:43:09.034436   97041 exec_runner.go:203] rm: /Users/lsh/.minikube/ca.pem
I0612 21:43:09.034593   97041 exec_runner.go:151] cp: /Users/lsh/.minikube/certs/ca.pem --> /Users/lsh/.minikube/ca.pem (1070 bytes)
I0612 21:43:09.034997   97041 exec_runner.go:144] found /Users/lsh/.minikube/cert.pem, removing ...
I0612 21:43:09.035001   97041 exec_runner.go:203] rm: /Users/lsh/.minikube/cert.pem
I0612 21:43:09.035067   97041 exec_runner.go:151] cp: /Users/lsh/.minikube/certs/cert.pem --> /Users/lsh/.minikube/cert.pem (1111 bytes)
I0612 21:43:09.035403   97041 exec_runner.go:144] found /Users/lsh/.minikube/key.pem, removing ...
I0612 21:43:09.035406   97041 exec_runner.go:203] rm: /Users/lsh/.minikube/key.pem
I0612 21:43:09.035471   97041 exec_runner.go:151] cp: /Users/lsh/.minikube/certs/key.pem --> /Users/lsh/.minikube/key.pem (1679 bytes)
I0612 21:43:09.035975   97041 provision.go:117] generating server cert: /Users/lsh/.minikube/machines/server.pem ca-key=/Users/lsh/.minikube/certs/ca.pem private-key=/Users/lsh/.minikube/certs/ca-key.pem org=lsh.polar san=[127.0.0.1 192.168.49.2 localhost minikube polar]
I0612 21:43:09.175376   97041 provision.go:177] copyRemoteCerts
I0612 21:43:09.175428   97041 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0612 21:43:09.175463   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:09.223318   97041 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:60004 SSHKeyPath:/Users/lsh/.minikube/machines/polar/id_rsa Username:docker}
I0612 21:43:09.340359   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1070 bytes)
I0612 21:43:09.360976   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/machines/server.pem --> /etc/docker/server.pem (1176 bytes)
I0612 21:43:09.376474   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0612 21:43:09.388231   97041 provision.go:87] duration metric: took 409.667875ms to configureAuth
I0612 21:43:09.388251   97041 ubuntu.go:193] setting minikube options for container-runtime
I0612 21:43:09.389834   97041 config.go:182] Loaded profile config "polar": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.30.0
I0612 21:43:09.389901   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:09.436752   97041 main.go:141] libmachine: Using SSH client type: native
I0612 21:43:09.436975   97041 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x102563180] 0x1025659e0 <nil>  [] 0s} 127.0.0.1 60004 <nil> <nil>}
I0612 21:43:09.436991   97041 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0612 21:43:09.569171   97041 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0612 21:43:09.569184   97041 ubuntu.go:71] root file system type: overlay
I0612 21:43:09.569307   97041 provision.go:314] Updating docker unit: /lib/systemd/system/docker.service ...
I0612 21:43:09.569423   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:09.621668   97041 main.go:141] libmachine: Using SSH client type: native
I0612 21:43:09.621830   97041 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x102563180] 0x1025659e0 <nil>  [] 0s} 127.0.0.1 60004 <nil> <nil>}
I0612 21:43:09.621865   97041 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0612 21:43:09.786225   97041 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0612 21:43:09.786446   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:09.846225   97041 main.go:141] libmachine: Using SSH client type: native
I0612 21:43:09.846415   97041 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x102563180] 0x1025659e0 <nil>  [] 0s} 127.0.0.1 60004 <nil> <nil>}
I0612 21:43:09.846424   97041 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0612 21:43:10.282779   97041 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2024-04-30 11:46:21.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2024-06-12 12:43:09.781859007 +0000
@@ -1,46 +1,49 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
+LimitNOFILE=infinity
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0612 21:43:10.282799   97041 machine.go:97] duration metric: took 1.863053834s to provisionDockerMachine
I0612 21:43:10.282811   97041 client.go:171] duration metric: took 5.718100792s to LocalClient.Create
I0612 21:43:10.282833   97041 start.go:167] duration metric: took 5.718137583s to libmachine.API.Create "polar"
I0612 21:43:10.282840   97041 start.go:293] postStartSetup for "polar" (driver="docker")
I0612 21:43:10.282850   97041 start.go:322] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0612 21:43:10.283007   97041 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0612 21:43:10.283071   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:10.341073   97041 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:60004 SSHKeyPath:/Users/lsh/.minikube/machines/polar/id_rsa Username:docker}
I0612 21:43:10.430117   97041 ssh_runner.go:195] Run: cat /etc/os-release
I0612 21:43:10.432408   97041 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0612 21:43:10.432428   97041 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0612 21:43:10.432434   97041 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0612 21:43:10.432438   97041 info.go:137] Remote host: Ubuntu 22.04.4 LTS
I0612 21:43:10.432444   97041 filesync.go:126] Scanning /Users/lsh/.minikube/addons for local assets ...
I0612 21:43:10.432579   97041 filesync.go:126] Scanning /Users/lsh/.minikube/files for local assets ...
I0612 21:43:10.432616   97041 start.go:296] duration metric: took 149.771333ms for postStartSetup
I0612 21:43:10.433172   97041 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" polar
I0612 21:43:10.479311   97041 profile.go:143] Saving config to /Users/lsh/.minikube/profiles/polar/config.json ...
I0612 21:43:10.479836   97041 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0612 21:43:10.479877   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:10.524050   97041 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:60004 SSHKeyPath:/Users/lsh/.minikube/machines/polar/id_rsa Username:docker}
I0612 21:43:10.617618   97041 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0612 21:43:10.621846   97041 start.go:128] duration metric: took 6.06448475s to createHost
I0612 21:43:10.621852   97041 start.go:83] releasing machines lock for "polar", held for 6.064566875s
I0612 21:43:10.621898   97041 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" polar
I0612 21:43:10.671647   97041 ssh_runner.go:195] Run: cat /version.json
I0612 21:43:10.671712   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:10.672534   97041 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0612 21:43:10.672667   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:10.721207   97041 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:60004 SSHKeyPath:/Users/lsh/.minikube/machines/polar/id_rsa Username:docker}
I0612 21:43:10.721200   97041 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:60004 SSHKeyPath:/Users/lsh/.minikube/machines/polar/id_rsa Username:docker}
I0612 21:43:11.057474   97041 ssh_runner.go:195] Run: systemctl --version
I0612 21:43:11.063344   97041 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0612 21:43:11.068330   97041 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0612 21:43:11.086101   97041 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0612 21:43:11.086234   97041 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0612 21:43:11.100072   97041 cni.go:262] disabled [/etc/cni/net.d/100-crio-bridge.conf, /etc/cni/net.d/87-podman-bridge.conflist] bridge cni config(s)
I0612 21:43:11.100123   97041 start.go:494] detecting cgroup driver to use...
I0612 21:43:11.100150   97041 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0612 21:43:11.100418   97041 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0612 21:43:11.107629   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0612 21:43:11.112165   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0612 21:43:11.116333   97041 containerd.go:146] configuring containerd to use "cgroupfs" as cgroup driver...
I0612 21:43:11.116471   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0612 21:43:11.121230   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0612 21:43:11.125692   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0612 21:43:11.130181   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0612 21:43:11.134597   97041 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0612 21:43:11.138511   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0612 21:43:11.142858   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i '/^ *enable_unprivileged_ports = .*/d' /etc/containerd/config.toml"
I0612 21:43:11.147034   97041 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)\[plugins."io.containerd.grpc.v1.cri"\]|&\n\1  enable_unprivileged_ports = true|' /etc/containerd/config.toml"
I0612 21:43:11.151286   97041 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0612 21:43:11.155050   97041 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0612 21:43:11.158803   97041 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0612 21:43:11.192901   97041 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0612 21:43:11.249519   97041 start.go:494] detecting cgroup driver to use...
I0612 21:43:11.249547   97041 detect.go:196] detected "cgroupfs" cgroup driver on host os
I0612 21:43:11.249718   97041 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0612 21:43:11.256186   97041 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0612 21:43:11.256298   97041 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0612 21:43:11.263222   97041 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0612 21:43:11.271690   97041 ssh_runner.go:195] Run: which cri-dockerd
I0612 21:43:11.273728   97041 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0612 21:43:11.278173   97041 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (189 bytes)
I0612 21:43:11.288048   97041 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0612 21:43:11.326138   97041 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0612 21:43:11.362534   97041 docker.go:574] configuring docker to use "cgroupfs" as cgroup driver...
I0612 21:43:11.362653   97041 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (130 bytes)
I0612 21:43:11.371262   97041 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0612 21:43:11.416510   97041 ssh_runner.go:195] Run: sudo systemctl restart docker
I0612 21:43:11.531158   97041 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.socket
I0612 21:43:11.537583   97041 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0612 21:43:11.543093   97041 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0612 21:43:11.579720   97041 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0612 21:43:11.614446   97041 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0612 21:43:11.649470   97041 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0612 21:43:11.676400   97041 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0612 21:43:11.682018   97041 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0612 21:43:11.717352   97041 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.service
I0612 21:43:11.765835   97041 start.go:541] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0612 21:43:11.766047   97041 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0612 21:43:11.768349   97041 start.go:562] Will wait 60s for crictl version
I0612 21:43:11.768446   97041 ssh_runner.go:195] Run: which crictl
I0612 21:43:11.770226   97041 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0612 21:43:11.789244   97041 start.go:578] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  26.1.1
RuntimeApiVersion:  v1
I0612 21:43:11.789385   97041 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0612 21:43:11.802465   97041 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0612 21:43:11.819159   97041 out.go:204] üê≥  Ïø†Î≤ÑÎÑ§Ìã∞Ïä§ v1.30.0 ÏùÑ Docker 26.1.1 Îü∞ÌÉÄÏûÑÏúºÎ°ú ÏÑ§ÏπòÌïòÎäî Ï§ë
I0612 21:43:11.819375   97041 cli_runner.go:164] Run: docker exec -t polar dig +short host.docker.internal
I0612 21:43:11.924206   97041 network.go:96] got host ip for mount in container by digging dns: 192.168.65.254
I0612 21:43:11.924363   97041 ssh_runner.go:195] Run: grep 192.168.65.254	host.minikube.internal$ /etc/hosts
I0612 21:43:11.926821   97041 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.65.254	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0612 21:43:11.932373   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" polar
I0612 21:43:11.977715   97041 kubeadm.go:877] updating cluster {Name:polar KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4096 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:polar Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} ...
I0612 21:43:11.977803   97041 preload.go:132] Checking if preload exists for k8s version v1.30.0 and runtime docker
I0612 21:43:11.977849   97041 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0612 21:43:11.988631   97041 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.30.0
registry.k8s.io/kube-proxy:v1.30.0
registry.k8s.io/kube-scheduler:v1.30.0
registry.k8s.io/kube-controller-manager:v1.30.0
registry.k8s.io/etcd:3.5.12-0
registry.k8s.io/coredns/coredns:v1.11.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0612 21:43:11.988641   97041 docker.go:615] Images already preloaded, skipping extraction
I0612 21:43:11.988741   97041 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0612 21:43:11.996525   97041 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.30.0
registry.k8s.io/kube-scheduler:v1.30.0
registry.k8s.io/kube-controller-manager:v1.30.0
registry.k8s.io/kube-proxy:v1.30.0
registry.k8s.io/etcd:3.5.12-0
registry.k8s.io/coredns/coredns:v1.11.1
registry.k8s.io/pause:3.9
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0612 21:43:11.996534   97041 cache_images.go:84] Images are preloaded, skipping loading
I0612 21:43:11.996541   97041 kubeadm.go:928] updating node { 192.168.49.2 8443 v1.30.0 docker true true} ...
I0612 21:43:11.996637   97041 kubeadm.go:940] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.30.0/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --hostname-override=polar --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.30.0 ClusterName:polar Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:}
I0612 21:43:11.996690   97041 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0612 21:43:12.026095   97041 cni.go:84] Creating CNI manager for ""
I0612 21:43:12.026106   97041 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0612 21:43:12.026121   97041 kubeadm.go:84] Using pod CIDR: 10.244.0.0/16
I0612 21:43:12.026131   97041 kubeadm.go:181] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.30.0 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:polar NodeName:polar DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[containerRuntimeEndpoint:unix:///var/run/cri-dockerd.sock hairpinMode:hairpin-veth runtimeRequestTimeout:15m] PrependCriSocketUnix:true}
I0612 21:43:12.026243   97041 kubeadm.go:187] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: unix:///var/run/cri-dockerd.sock
  name: "polar"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.30.0
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
containerRuntimeEndpoint: unix:///var/run/cri-dockerd.sock
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0612 21:43:12.026337   97041 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.30.0
I0612 21:43:12.030952   97041 binaries.go:44] Found k8s binaries, skipping transfer
I0612 21:43:12.031001   97041 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0612 21:43:12.034932   97041 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (304 bytes)
I0612 21:43:12.043508   97041 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0612 21:43:12.051677   97041 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2147 bytes)
I0612 21:43:12.060115   97041 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0612 21:43:12.061937   97041 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0612 21:43:12.066727   97041 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0612 21:43:12.102938   97041 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0612 21:43:12.119583   97041 certs.go:68] Setting up /Users/lsh/.minikube/profiles/polar for IP: 192.168.49.2
I0612 21:43:12.119601   97041 certs.go:194] generating shared ca certs ...
I0612 21:43:12.119617   97041 certs.go:226] acquiring lock for ca certs: {Name:mk6047a3b382d245d2ee5acda959bcfba1c468cf Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:12.120752   97041 certs.go:235] skipping valid "minikubeCA" ca cert: /Users/lsh/.minikube/ca.key
I0612 21:43:12.120934   97041 certs.go:235] skipping valid "proxyClientCA" ca cert: /Users/lsh/.minikube/proxy-client-ca.key
I0612 21:43:12.120939   97041 certs.go:256] generating profile certs ...
I0612 21:43:12.120995   97041 certs.go:363] generating signed profile cert for "minikube-user": /Users/lsh/.minikube/profiles/polar/client.key
I0612 21:43:12.121001   97041 crypto.go:68] Generating cert /Users/lsh/.minikube/profiles/polar/client.crt with IP's: []
I0612 21:43:12.182987   97041 crypto.go:156] Writing cert to /Users/lsh/.minikube/profiles/polar/client.crt ...
I0612 21:43:12.182997   97041 lock.go:35] WriteFile acquiring /Users/lsh/.minikube/profiles/polar/client.crt: {Name:mkbd81449cd7c8ae35942067e0697d3266825c97 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:12.183382   97041 crypto.go:164] Writing key to /Users/lsh/.minikube/profiles/polar/client.key ...
I0612 21:43:12.183386   97041 lock.go:35] WriteFile acquiring /Users/lsh/.minikube/profiles/polar/client.key: {Name:mkc7a3bfda55702ededf1ddaf27afec7676bd615 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:12.183545   97041 certs.go:363] generating signed profile cert for "minikube": /Users/lsh/.minikube/profiles/polar/apiserver.key.01e3659a
I0612 21:43:12.183554   97041 crypto.go:68] Generating cert /Users/lsh/.minikube/profiles/polar/apiserver.crt.01e3659a with IP's: [10.96.0.1 127.0.0.1 10.0.0.1 192.168.49.2]
I0612 21:43:12.306341   97041 crypto.go:156] Writing cert to /Users/lsh/.minikube/profiles/polar/apiserver.crt.01e3659a ...
I0612 21:43:12.306345   97041 lock.go:35] WriteFile acquiring /Users/lsh/.minikube/profiles/polar/apiserver.crt.01e3659a: {Name:mka970a66f9d9496cbcc499291a5f2f0527e6e2d Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:12.306580   97041 crypto.go:164] Writing key to /Users/lsh/.minikube/profiles/polar/apiserver.key.01e3659a ...
I0612 21:43:12.306582   97041 lock.go:35] WriteFile acquiring /Users/lsh/.minikube/profiles/polar/apiserver.key.01e3659a: {Name:mk82a865d9ca42be52ac407cdd968ebafa82ac3d Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:12.306720   97041 certs.go:381] copying /Users/lsh/.minikube/profiles/polar/apiserver.crt.01e3659a -> /Users/lsh/.minikube/profiles/polar/apiserver.crt
I0612 21:43:12.306893   97041 certs.go:385] copying /Users/lsh/.minikube/profiles/polar/apiserver.key.01e3659a -> /Users/lsh/.minikube/profiles/polar/apiserver.key
I0612 21:43:12.307007   97041 certs.go:363] generating signed profile cert for "aggregator": /Users/lsh/.minikube/profiles/polar/proxy-client.key
I0612 21:43:12.307014   97041 crypto.go:68] Generating cert /Users/lsh/.minikube/profiles/polar/proxy-client.crt with IP's: []
I0612 21:43:12.406751   97041 crypto.go:156] Writing cert to /Users/lsh/.minikube/profiles/polar/proxy-client.crt ...
I0612 21:43:12.406755   97041 lock.go:35] WriteFile acquiring /Users/lsh/.minikube/profiles/polar/proxy-client.crt: {Name:mkd52e4c4f9e859b7925a1d5466d6b7c9f073698 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:12.406978   97041 crypto.go:164] Writing key to /Users/lsh/.minikube/profiles/polar/proxy-client.key ...
I0612 21:43:12.406980   97041 lock.go:35] WriteFile acquiring /Users/lsh/.minikube/profiles/polar/proxy-client.key: {Name:mke296787f387c668433c8b15127514a148b73f9 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:12.407263   97041 certs.go:484] found cert: /Users/lsh/.minikube/certs/ca-key.pem (1675 bytes)
I0612 21:43:12.407286   97041 certs.go:484] found cert: /Users/lsh/.minikube/certs/ca.pem (1070 bytes)
I0612 21:43:12.407307   97041 certs.go:484] found cert: /Users/lsh/.minikube/certs/cert.pem (1111 bytes)
I0612 21:43:12.407325   97041 certs.go:484] found cert: /Users/lsh/.minikube/certs/key.pem (1679 bytes)
I0612 21:43:12.408684   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0612 21:43:12.437501   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1679 bytes)
I0612 21:43:12.451003   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0612 21:43:12.464114   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1675 bytes)
I0612 21:43:12.474872   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/profiles/polar/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1407 bytes)
I0612 21:43:12.485468   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/profiles/polar/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0612 21:43:12.495697   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/profiles/polar/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0612 21:43:12.505965   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/profiles/polar/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1675 bytes)
I0612 21:43:12.528281   97041 ssh_runner.go:362] scp /Users/lsh/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0612 21:43:12.564997   97041 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0612 21:43:12.590003   97041 ssh_runner.go:195] Run: openssl version
I0612 21:43:12.602932   97041 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0612 21:43:12.614864   97041 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0612 21:43:12.620073   97041 certs.go:528] hashing: -rw-r--r-- 1 root root 1111 Jun  8 02:29 /usr/share/ca-certificates/minikubeCA.pem
I0612 21:43:12.620156   97041 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0612 21:43:12.625173   97041 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0612 21:43:12.632162   97041 ssh_runner.go:195] Run: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt
I0612 21:43:12.635475   97041 certs.go:399] 'apiserver-kubelet-client' cert doesn't exist, likely first start: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt: Process exited with status 1
stdout:

stderr:
stat: cannot statx '/var/lib/minikube/certs/apiserver-kubelet-client.crt': No such file or directory
I0612 21:43:12.635541   97041 kubeadm.go:391] StartCluster: {Name:polar KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e Memory:4096 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.30.0 ClusterName:polar Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0612 21:43:12.635685   97041 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0612 21:43:12.649607   97041 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0612 21:43:12.656611   97041 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0612 21:43:12.661931   97041 kubeadm.go:213] ignoring SystemVerification for kubeadm because of docker driver
I0612 21:43:12.662007   97041 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0612 21:43:12.666375   97041 kubeadm.go:154] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0612 21:43:12.666385   97041 kubeadm.go:156] found existing configuration files:

I0612 21:43:12.666442   97041 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf
I0612 21:43:12.672944   97041 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/admin.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/admin.conf: No such file or directory
I0612 21:43:12.673046   97041 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/admin.conf
I0612 21:43:12.685428   97041 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf
I0612 21:43:12.702118   97041 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/kubelet.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/kubelet.conf: No such file or directory
I0612 21:43:12.702476   97041 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/kubelet.conf
I0612 21:43:12.715419   97041 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf
I0612 21:43:12.729710   97041 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/controller-manager.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/controller-manager.conf: No such file or directory
I0612 21:43:12.729816   97041 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/controller-manager.conf
I0612 21:43:12.745311   97041 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf
I0612 21:43:12.757360   97041 kubeadm.go:162] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/scheduler.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/scheduler.conf: No such file or directory
I0612 21:43:12.757471   97041 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/scheduler.conf
I0612 21:43:12.772823   97041 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.30.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0612 21:43:12.830446   97041 kubeadm.go:309] [init] Using Kubernetes version: v1.30.0
I0612 21:43:12.830503   97041 kubeadm.go:309] [preflight] Running pre-flight checks
I0612 21:43:12.887677   97041 kubeadm.go:309] [preflight] Pulling images required for setting up a Kubernetes cluster
I0612 21:43:12.887795   97041 kubeadm.go:309] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0612 21:43:12.887894   97041 kubeadm.go:309] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0612 21:43:12.992611   97041 kubeadm.go:309] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0612 21:43:12.995344   97041 out.go:204]     ‚ñ™ Ïù∏Ï¶ùÏÑú Î∞è ÌÇ§Î•º ÏÉùÏÑ±ÌïòÎäî Ï§ë ...
I0612 21:43:12.995531   97041 kubeadm.go:309] [certs] Using existing ca certificate authority
I0612 21:43:12.995688   97041 kubeadm.go:309] [certs] Using existing apiserver certificate and key on disk
I0612 21:43:13.232527   97041 kubeadm.go:309] [certs] Generating "apiserver-kubelet-client" certificate and key
I0612 21:43:13.345441   97041 kubeadm.go:309] [certs] Generating "front-proxy-ca" certificate and key
I0612 21:43:13.415879   97041 kubeadm.go:309] [certs] Generating "front-proxy-client" certificate and key
I0612 21:43:13.511326   97041 kubeadm.go:309] [certs] Generating "etcd/ca" certificate and key
I0612 21:43:13.654368   97041 kubeadm.go:309] [certs] Generating "etcd/server" certificate and key
I0612 21:43:13.654559   97041 kubeadm.go:309] [certs] etcd/server serving cert is signed for DNS names [localhost polar] and IPs [192.168.49.2 127.0.0.1 ::1]
I0612 21:43:13.785216   97041 kubeadm.go:309] [certs] Generating "etcd/peer" certificate and key
I0612 21:43:13.785335   97041 kubeadm.go:309] [certs] etcd/peer serving cert is signed for DNS names [localhost polar] and IPs [192.168.49.2 127.0.0.1 ::1]
I0612 21:43:13.854345   97041 kubeadm.go:309] [certs] Generating "etcd/healthcheck-client" certificate and key
I0612 21:43:13.973073   97041 kubeadm.go:309] [certs] Generating "apiserver-etcd-client" certificate and key
I0612 21:43:14.031874   97041 kubeadm.go:309] [certs] Generating "sa" key and public key
I0612 21:43:14.032081   97041 kubeadm.go:309] [kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I0612 21:43:14.079193   97041 kubeadm.go:309] [kubeconfig] Writing "admin.conf" kubeconfig file
I0612 21:43:14.247702   97041 kubeadm.go:309] [kubeconfig] Writing "super-admin.conf" kubeconfig file
I0612 21:43:14.482259   97041 kubeadm.go:309] [kubeconfig] Writing "kubelet.conf" kubeconfig file
I0612 21:43:14.799399   97041 kubeadm.go:309] [kubeconfig] Writing "controller-manager.conf" kubeconfig file
I0612 21:43:15.036317   97041 kubeadm.go:309] [kubeconfig] Writing "scheduler.conf" kubeconfig file
I0612 21:43:15.036604   97041 kubeadm.go:309] [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I0612 21:43:15.037972   97041 kubeadm.go:309] [control-plane] Using manifest folder "/etc/kubernetes/manifests"
I0612 21:43:15.041242   97041 out.go:204]     ‚ñ™ Ïª®Ìä∏Î°§ ÌîåÎ†àÏù∏ÏùÑ Î∂ÄÌåÖÌïòÎäî Ï§ë ...
I0612 21:43:15.041525   97041 kubeadm.go:309] [control-plane] Creating static Pod manifest for "kube-apiserver"
I0612 21:43:15.041778   97041 kubeadm.go:309] [control-plane] Creating static Pod manifest for "kube-controller-manager"
I0612 21:43:15.042003   97041 kubeadm.go:309] [control-plane] Creating static Pod manifest for "kube-scheduler"
I0612 21:43:15.044033   97041 kubeadm.go:309] [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
I0612 21:43:15.044408   97041 kubeadm.go:309] [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
I0612 21:43:15.044446   97041 kubeadm.go:309] [kubelet-start] Starting the kubelet
I0612 21:43:15.089299   97041 kubeadm.go:309] [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests"
I0612 21:43:15.089369   97041 kubeadm.go:309] [kubelet-check] Waiting for a healthy kubelet. This can take up to 4m0s
I0612 21:43:15.598115   97041 kubeadm.go:309] [kubelet-check] The kubelet is healthy after 507.796459ms
I0612 21:43:15.598254   97041 kubeadm.go:309] [api-check] Waiting for a healthy API server. This can take up to 4m0s
I0612 21:43:19.102539   97041 kubeadm.go:309] [api-check] The API server is healthy after 3.50444371s
I0612 21:43:19.121086   97041 kubeadm.go:309] [upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I0612 21:43:19.128657   97041 kubeadm.go:309] [kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I0612 21:43:19.140853   97041 kubeadm.go:309] [upload-certs] Skipping phase. Please see --upload-certs
I0612 21:43:19.141024   97041 kubeadm.go:309] [mark-control-plane] Marking the node polar as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
I0612 21:43:19.144523   97041 kubeadm.go:309] [bootstrap-token] Using token: 01xx6t.gwxewdtda0u2cf1x
I0612 21:43:19.147923   97041 out.go:204]     ‚ñ™ RBAC Í∑úÏπôÏùÑ Íµ¨ÏÑ±ÌïòÎäî Ï§ë ...
I0612 21:43:19.148123   97041 kubeadm.go:309] [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
I0612 21:43:19.153019   97041 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
I0612 21:43:19.155754   97041 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
I0612 21:43:19.156763   97041 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
I0612 21:43:19.157722   97041 kubeadm.go:309] [bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
I0612 21:43:19.158794   97041 kubeadm.go:309] [bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I0612 21:43:19.515212   97041 kubeadm.go:309] [kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I0612 21:43:19.916969   97041 kubeadm.go:309] [addons] Applied essential addon: CoreDNS
I0612 21:43:20.507718   97041 kubeadm.go:309] [addons] Applied essential addon: kube-proxy
I0612 21:43:20.507945   97041 kubeadm.go:309] 
I0612 21:43:20.508006   97041 kubeadm.go:309] Your Kubernetes control-plane has initialized successfully!
I0612 21:43:20.508011   97041 kubeadm.go:309] 
I0612 21:43:20.508084   97041 kubeadm.go:309] To start using your cluster, you need to run the following as a regular user:
I0612 21:43:20.508088   97041 kubeadm.go:309] 
I0612 21:43:20.508122   97041 kubeadm.go:309]   mkdir -p $HOME/.kube
I0612 21:43:20.508183   97041 kubeadm.go:309]   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
I0612 21:43:20.508230   97041 kubeadm.go:309]   sudo chown $(id -u):$(id -g) $HOME/.kube/config
I0612 21:43:20.508241   97041 kubeadm.go:309] 
I0612 21:43:20.508290   97041 kubeadm.go:309] Alternatively, if you are the root user, you can run:
I0612 21:43:20.508294   97041 kubeadm.go:309] 
I0612 21:43:20.508340   97041 kubeadm.go:309]   export KUBECONFIG=/etc/kubernetes/admin.conf
I0612 21:43:20.508351   97041 kubeadm.go:309] 
I0612 21:43:20.508524   97041 kubeadm.go:309] You should now deploy a pod network to the cluster.
I0612 21:43:20.508790   97041 kubeadm.go:309] Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
I0612 21:43:20.509000   97041 kubeadm.go:309]   https://kubernetes.io/docs/concepts/cluster-administration/addons/
I0612 21:43:20.509015   97041 kubeadm.go:309] 
I0612 21:43:20.509299   97041 kubeadm.go:309] You can now join any number of control-plane nodes by copying certificate authorities
I0612 21:43:20.509513   97041 kubeadm.go:309] and service account keys on each node and then running the following as root:
I0612 21:43:20.509516   97041 kubeadm.go:309] 
I0612 21:43:20.509597   97041 kubeadm.go:309]   kubeadm join control-plane.minikube.internal:8443 --token 01xx6t.gwxewdtda0u2cf1x \
I0612 21:43:20.509706   97041 kubeadm.go:309] 	--discovery-token-ca-cert-hash sha256:1cf76e51b605a8e1680b3acf228bfe69a88a6b3d475685dd890f41b2a86aa31d \
I0612 21:43:20.509725   97041 kubeadm.go:309] 	--control-plane 
I0612 21:43:20.509728   97041 kubeadm.go:309] 
I0612 21:43:20.509808   97041 kubeadm.go:309] Then you can join any number of worker nodes by running the following on each as root:
I0612 21:43:20.509814   97041 kubeadm.go:309] 
I0612 21:43:20.509898   97041 kubeadm.go:309] kubeadm join control-plane.minikube.internal:8443 --token 01xx6t.gwxewdtda0u2cf1x \
I0612 21:43:20.509999   97041 kubeadm.go:309] 	--discovery-token-ca-cert-hash sha256:1cf76e51b605a8e1680b3acf228bfe69a88a6b3d475685dd890f41b2a86aa31d 
I0612 21:43:20.510114   97041 kubeadm.go:309] 	[WARNING Swap]: swap is supported for cgroup v2 only; the NodeSwap feature gate of the kubelet is beta but disabled by default
I0612 21:43:20.510305   97041 kubeadm.go:309] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0612 21:43:20.510316   97041 cni.go:84] Creating CNI manager for ""
I0612 21:43:20.510335   97041 cni.go:158] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0612 21:43:20.514818   97041 out.go:177] üîó  bridge CNI (Container Networking Interface) Î•º Íµ¨ÏÑ±ÌïòÎäî Ï§ë ...
I0612 21:43:20.516507   97041 ssh_runner.go:195] Run: sudo mkdir -p /etc/cni/net.d
I0612 21:43:20.521494   97041 ssh_runner.go:362] scp memory --> /etc/cni/net.d/1-k8s.conflist (496 bytes)
I0612 21:43:20.529815   97041 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0612 21:43:20.529921   97041 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.30.0/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0612 21:43:20.530233   97041 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig label --overwrite nodes polar minikube.k8s.io/updated_at=2024_06_12T21_43_20_0700 minikube.k8s.io/version=v1.33.1 minikube.k8s.io/commit=5883c09216182566a63dff4c326a6fc9ed2982ff minikube.k8s.io/name=polar minikube.k8s.io/primary=true
I0612 21:43:20.581478   97041 kubeadm.go:1107] duration metric: took 51.657375ms to wait for elevateKubeSystemPrivileges
I0612 21:43:20.581497   97041 ops.go:34] apiserver oom_adj: -16
W0612 21:43:20.581508   97041 kubeadm.go:286] apiserver tunnel failed: apiserver port not set
I0612 21:43:20.581513   97041 kubeadm.go:393] duration metric: took 7.945909542s to StartCluster
I0612 21:43:20.581526   97041 settings.go:142] acquiring lock: {Name:mk49d1249e711148f1149214d1fa0a81cea70c88 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:20.581670   97041 settings.go:150] Updating kubeconfig:  /Users/lsh/.kube/config
I0612 21:43:20.583081   97041 lock.go:35] WriteFile acquiring /Users/lsh/.kube/config: {Name:mkb9958328dd593fa58e0ebec2858d499a270c0e Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0612 21:43:20.583475   97041 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml"
I0612 21:43:20.583499   97041 start.go:234] Will wait 6m0s for node &{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.30.0 ContainerRuntime:docker ControlPlane:true Worker:true}
I0612 21:43:20.586374   97041 out.go:177] üîé  Kubernetes Íµ¨ÏÑ± ÏöîÏÜåÎ•º ÌôïÏù∏...
I0612 21:43:20.583504   97041 addons.go:502] enable addons start: toEnable=map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:true efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false inspektor-gadget:false istio:false istio-provisioner:false kong:false kubeflow:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-device-plugin:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false storage-provisioner-rancher:false volumesnapshots:false yakd:false]
I0612 21:43:20.583625   97041 config.go:182] Loaded profile config "polar": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.30.0
I0612 21:43:20.586406   97041 addons.go:69] Setting storage-provisioner=true in profile "polar"
I0612 21:43:20.586407   97041 addons.go:69] Setting default-storageclass=true in profile "polar"
I0612 21:43:20.592307   97041 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "polar"
I0612 21:43:20.592324   97041 addons.go:234] Setting addon storage-provisioner=true in "polar"
I0612 21:43:20.592345   97041 host.go:66] Checking if "polar" exists ...
I0612 21:43:20.592366   97041 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0612 21:43:20.592564   97041 cli_runner.go:164] Run: docker container inspect polar --format={{.State.Status}}
I0612 21:43:20.592672   97041 cli_runner.go:164] Run: docker container inspect polar --format={{.State.Status}}
I0612 21:43:20.626391   97041 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.65.254 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.30.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -"
I0612 21:43:20.643349   97041 out.go:177]     ‚ñ™ Using image gcr.io/k8s-minikube/storage-provisioner:v5
I0612 21:43:20.640555   97041 addons.go:234] Setting addon default-storageclass=true in "polar"
I0612 21:43:20.641816   97041 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0612 21:43:20.644826   97041 host.go:66] Checking if "polar" exists ...
I0612 21:43:20.644961   97041 addons.go:426] installing /etc/kubernetes/addons/storage-provisioner.yaml
I0612 21:43:20.644971   97041 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I0612 21:43:20.645036   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:20.645097   97041 cli_runner.go:164] Run: docker container inspect polar --format={{.State.Status}}
I0612 21:43:20.686934   97041 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:60004 SSHKeyPath:/Users/lsh/.minikube/machines/polar/id_rsa Username:docker}
I0612 21:43:20.686974   97041 addons.go:426] installing /etc/kubernetes/addons/storageclass.yaml
I0612 21:43:20.686989   97041 ssh_runner.go:362] scp storageclass/storageclass.yaml --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I0612 21:43:20.687052   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" polar
I0612 21:43:20.729796   97041 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:60004 SSHKeyPath:/Users/lsh/.minikube/machines/polar/id_rsa Username:docker}
I0612 21:43:20.753745   97041 start.go:946] {"host.minikube.internal": 192.168.65.254} host record injected into CoreDNS's ConfigMap
I0612 21:43:20.753801   97041 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" polar
I0612 21:43:20.785304   97041 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.30.0/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I0612 21:43:20.794498   97041 api_server.go:52] waiting for apiserver process to appear ...
I0612 21:43:20.794541   97041 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I0612 21:43:20.819138   97041 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.30.0/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I0612 21:43:20.962083   97041 api_server.go:72] duration metric: took 378.5615ms to wait for apiserver process to appear ...
I0612 21:43:20.962093   97041 api_server.go:88] waiting for apiserver healthz status ...
I0612 21:43:20.962332   97041 api_server.go:253] Checking apiserver healthz at https://127.0.0.1:60003/healthz ...
I0612 21:43:20.968484   97041 out.go:177] üåü  Ïï†ÎìúÏò® ÌôúÏÑ±Ìôî : storage-provisioner, default-storageclass
I0612 21:43:20.966078   97041 api_server.go:279] https://127.0.0.1:60003/healthz returned 200:
ok
I0612 21:43:20.974341   97041 addons.go:505] duration metric: took 390.828333ms for enable addons: enabled=[storage-provisioner default-storageclass]
I0612 21:43:20.969083   97041 api_server.go:141] control plane version: v1.30.0
I0612 21:43:20.974373   97041 api_server.go:131] duration metric: took 12.2725ms to wait for apiserver health ...
I0612 21:43:20.974380   97041 system_pods.go:43] waiting for kube-system pods to appear ...
I0612 21:43:20.979106   97041 system_pods.go:59] 5 kube-system pods found
I0612 21:43:20.979122   97041 system_pods.go:61] "etcd-polar" [f67a6d3f-4152-4b40-98c7-23ce6dcdb489] Running / Ready:ContainersNotReady (containers with unready status: [etcd]) / ContainersReady:ContainersNotReady (containers with unready status: [etcd])
I0612 21:43:20.979129   97041 system_pods.go:61] "kube-apiserver-polar" [62fe3d1e-c646-4aab-aab0-c64f57f9f2d9] Running / Ready:ContainersNotReady (containers with unready status: [kube-apiserver]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-apiserver])
I0612 21:43:20.979134   97041 system_pods.go:61] "kube-controller-manager-polar" [79ccce00-8630-4a9b-8203-99bfd5f41295] Running / Ready:ContainersNotReady (containers with unready status: [kube-controller-manager]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-controller-manager])
I0612 21:43:20.979139   97041 system_pods.go:61] "kube-scheduler-polar" [3109f886-a264-4084-84d4-446b085c2a35] Running / Ready:ContainersNotReady (containers with unready status: [kube-scheduler]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-scheduler])
I0612 21:43:20.979143   97041 system_pods.go:61] "storage-provisioner" [eb05e5c5-2b0a-4275-ab64-36546f4204ca] Pending
I0612 21:43:20.979147   97041 system_pods.go:74] duration metric: took 4.763458ms to wait for pod list to return data ...
I0612 21:43:20.979153   97041 kubeadm.go:576] duration metric: took 395.63475ms to wait for: map[apiserver:true system_pods:true]
I0612 21:43:20.979165   97041 node_conditions.go:102] verifying NodePressure condition ...
I0612 21:43:20.981115   97041 node_conditions.go:122] node storage ephemeral capacity is 61202244Ki
I0612 21:43:20.981123   97041 node_conditions.go:123] node cpu capacity is 11
I0612 21:43:20.981135   97041 node_conditions.go:105] duration metric: took 1.967583ms to run NodePressure ...
I0612 21:43:20.981147   97041 start.go:240] waiting for startup goroutines ...
I0612 21:43:21.260436   97041 kapi.go:248] "coredns" deployment in "kube-system" namespace and "polar" context rescaled to 1 replicas
I0612 21:43:21.260486   97041 start.go:245] waiting for cluster config update ...
I0612 21:43:21.260536   97041 start.go:254] writing updated cluster config ...
I0612 21:43:21.261892   97041 ssh_runner.go:195] Run: rm -f paused
I0612 21:43:21.462779   97041 start.go:600] kubectl: 1.30.1, cluster: 1.30.0 (minor skew: 0)
I0612 21:43:21.466715   97041 out.go:177] üèÑ  ÎÅùÎÇ¨ÏäµÎãàÎã§! kubectlÏù¥ "polar" ÌÅ¥Îü¨Ïä§ÌÑ∞ÏôÄ "default" ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î•º Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏÇ¨Ïö©ÌïòÎèÑÎ°ù Íµ¨ÏÑ±ÎêòÏóàÏäµÎãàÎã§.


